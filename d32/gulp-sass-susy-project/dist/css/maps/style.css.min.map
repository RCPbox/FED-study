{"version":3,"sources":["compass/_reset.scss","yamoo9/helpers/rwd/_rwd-image.scss","yamoo9/helpers/rwd/_rwd-video.scss","yamoo9/helpers/layout/_position.scss","yamoo9/helpers/layout/_size.scss","compass/_vertical_rhythm.scss","compass/_units.scss","yamoo9/helpers/_headings.sass","modules/_typography.scss","susy/susy/language/susy/_box-sizing.scss","susy/susy/output/support/_rem.scss","modules/_layout.scss","susy/susy/language/susy/_container.scss","susy/susy/output/support/_clearfix.scss","_config.scss","susy/susy/language/susy/_span.scss","susy/susy/output/shared/_direction.scss","yamoo9/helpers/_color.sass"],"names":[],"mappings":"AAIA;;;;;;;;;;;;;CAaE,UAAU;CACV,WAAW;CACX,UAAU;CACV,gBAAgB;CAChB,cAAc;CACd,yBAAyB;CAC1B;;AAED;;CAEE,eAAe;CAChB;;AACD;CACE,eAAe;CAChB;;AACD;CACE,iBAAiB;CAClB;;AACD;CACE,aAAa;CACd;;AACD;;CAEE,YAAY;CACZ,cAAc;CACf;;AACD;CACE,0BAA0B;CAC1B,kBAAkB;CACnB;;AC9CD;CACC,aAAa;CACb,gBAAgB;CAChB;;ACoDD;CAEC,gBAAgB;CAChB;;AAED;CACC,iBAAiB;CACjB,mBAAmB;CACnB,UAAU;CASV;;AAPE;CChEF,mBAY0B;CAPvB,OD8DqB;CC9DrB,QD8D4B;CE9D9B,YF+DkB;CE9DlB,aF8DkB;CAClB;;AGqCA;CACE,iBATkB;CAehB,mBCpCmD;CDyCtD;;AErFF;CF2DG,iBANgC;CEpDvB;;AADZ;CCpBA,kBAAkB;CAClB,iBAAiB;CDoBL;;ACjBb;CH2EI,gBANgC;CAMhC,kBANgC;CGjEnC;;AAED;CHqEI,gBANgC;CAMhC,kBANgC;CG7DnC;;AAED;CHiEI,gBANgC;CAMhC,kBANgC;CGzDnC;;AAED;CH6DI,gBANgC;CAMhC,kBANgC;CGrDnC;;AAED;CHyDI,gBANgC;CAMhC,kBANgC;CGjDnC;;AAED;CHqDI,gBANgC;CAMhC,kBANgC;CG7CnC;;AAED;CHiDI,gBANgC;CAMhC,kBANgC;CAMhC,oBANgC;CGxCnC;;AC3BG;CCDA,4BCHiC;CDGjC,+BCHiC;CDGjC,uBCHiC;CFI6B;;AEFlE;CDCI,gBEuCe;CFvCf,kBEqDoC;CFrDpC,mBEqDmE;CDhDtE;;AAND;CENM,aAAa;CACb,eAAe;CACf,YAAY;CACb;;AFGL;CAIE,gBGbgC;CHchC;;AAGF;CDPI,YKyHkE;CLzHlE,YMA4D;CNA5D,eK+EqB;CL/ErB,gBKkFoB;CJzEvB,cAAyB;CMqCxB,wCA9Be;CNLhB;;AAED;CDbI,YKyHkE;CLzHlE,YMA4D;CNA5D,eK+EqB;CL/ErB,gBKkFoB;CEpCtB,wCA9Be;CNAhB;;AAED;CDlBI,YKyHkE;CLzHlE,YMA4D;CNA5D,eK+EqB;CL/ErB,gBKkFoB;CEpCtB,wCA9Be;CNMhB,WAAW;CAkBX;;AJzBA;CIUC,gBGnCgC;CP0BrB;;AIEb;CAWE,gBGvCgC;CHwChC;;AAZF;CV9BI,aU+CuB;CNuCvB,iBANgC;CAMhC,oBANgC;CM9BjC;;AAIH;CD1CI,YKyHkE;CLzHlE,YMA4D;CNA5D,eK+EqB;CL/ErB,gBKkFoB;CEpCtB,wCA9Be;CN6BhB;;AAED;;;CAGC,WAAW;CACX;;AAED;CACC,UAAU;CNoBP,iBANgC;CAMhC,oBANgC;CHXnC,kBAAkB;CAGlB,uBAA8C;CSF9C;;ATKC;CACC,aSPkD;CTSlD","file":"style.css","sourcesContent":["// http://meyerweb.com/eric/tools/css/reset/\r\n//  v2.0 | 20110126\r\n//  License: none (public domain)\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n// HTML5 display-role reset for older browsers\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n  display: block;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}","%rwd-image {\n\theight: auto;\n\tmax-width: 100%;\n}\n\n@mixin rwd-image ($width: 100%) {\n    @extend %rwd-image;\n    width: $width;\n}","// ----------------------------------------\n// 반응형 웹 디자인\n// 유동 폭 : HTML5 Videos 요소\n\n// HTML5 Video 요소에 적용되나,\n// <iframe>, <object>, <embed> 요소에는\n// 아래 방법이 적용 안됨.\n\n// video {\n// \tmax-width: 100%;\n// \theight: auto;\n// }\n\n// ----------------------------------------\n// 반응형 웹 디자인\n// 유동 폭 : iframe, object, embed 요소\n\n// 간단한 트릭으로 이 문제 해결이 가능.\n\n// 비디오 요소를 감싸는 <div> 컨테이너 생성 후,\n// padding-bottom 값을 50 ~ 60% 사이 값으로 설정.\n// 그리고 자식 요소인 <iframe>, <object>, <embed>에\n// 다음과 같은 CSS 코드 설정. 그렇게 하면 강제적으로 포함된\n// 요소의 높이를 넓이에 맞춰 확장하게 됨.\n\n// position : absolute;\n// width    : 100%;\n// height   : 100%;\n\n// ----------------------------------------\n// HTML 마크업 예시\n\n// <div class=\"video-container\">\n// \t<iframe src=\"\"></iframe>\n// </div>\n\n// ----------------------------------------\n// 고정(width)/유동(max-width) 폭 디자인 예시\n\n// .video-wrapper {\n// \twidth: <고정 폭>;\n// \tmax-width: 100%;\n// }\n\n// <div class=\"video-wrapper\">\n// \t<div class=\"video-container\">\n// \t\t<iframe src=\"\"></iframe>\n// \t</div>\n// </div>\n\n// ----------------------------------------\n// 참고 URL\n// http://webdesignerwall.com/demo/elastic-videos/\n\n\n%rwd-video-wrapper {\n\t// width: 600px;\n\tmax-width: 100%;\n}\n\n%rwd-video-container {\n\toverflow: hidden;\n\tposition: relative;\n\theight: 0;\n\n\t& iframe,\n\t& object,\n\t& embed {\n\t\t@include absolute(top 0 left 0);\n\t\t@include size(100%);\n\t}\n\n}\n\n@mixin rwd-video ($ratio-16-9: true, $wrapper: null, $wrapper-width: 600px) {\n\t@extend %rwd-video-container;\n\tpadding-top: 30px;\n\t// 16:9 비율 = 56.25%\n\t//  4:3 비율 = 75%\n\tpadding-bottom: if($ratio-16-9 == true, 56.25%, 75%);\n\n\t@if $wrapper != null {\n\t\t#{$wrapper} & {\n\t\t\twidth: $wrapper-width;\n\t\t\t@extend %rwd-video-wrapper;\n\t\t}\n\t}\n\n}\n","@mixin position($position, $args) {\n\tposition: $position;\n\t@if $args != null {\n\t\t@each $dir in top, left, bottom, right {\n\t\t\t$i: index($args, $dir);\n\t\t\t@if $i {\n\t\t\t\t#{$dir}: nth($args, $i + 1);\n\t\t\t}\n\t\t}\n\t}\n}\n\n@mixin absolute($args: null) {\n\t@include position(absolute, $args);\n}\n@mixin relative($args: null) {\n\t@include position(relative, $args);\n}\n@mixin fixed($args: null) {\n\t@include position(fixed, $args);\n}","@mixin size ($dimension: null null) {\n\t@if length($dimension) == 2 {\n\t\twidth: nth($dimension, 1);\n\t\theight: nth($dimension, 2);\n\t}\n\t@if length($dimension) == 1 {\n\t\twidth: nth($dimension, 1);\n\t\theight: nth($dimension, 1);\n\t}\n}\n","@import \"grid_background\";\r\n@import \"units\";\r\n\r\n// The default font size for all text in pixels\r\n$base-font-size: 16px !default;\r\n\r\n// The distance between text baselines (vertical rhythm) in pixels.\r\n$base-line-height: 24px !default;\r\n\r\n// The length unit in which to output rhythm values.\r\n// Supported values: px, em, rem. Percent units can't be used since they\r\n// make calculating padding and margins impractical, and percentage borders are\r\n// not valid or supported in css.\r\n$rhythm-unit: 'em' !default;\r\n\r\n// Whether to output fallback values in px when using rem as the rhythm-unit.\r\n$rem-with-px-fallback: true !default;\r\n\r\n// Default values for rhythm borders properties.\r\n// Supports style alone eg. `solid` or list of style and color eg. `solid #aaa`;\r\n$default-rhythm-border-width: 1px !default;\r\n$default-rhythm-border-style: solid !default;\r\n\r\n// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function\r\n// to round the line height to the nearest half line height instead of the\r\n// nearest integral line height to avoid large spacing between lines.\r\n$round-to-nearest-half-line: false !default;\r\n\r\n// Ensure there is at least this many pixels\r\n// of vertical padding above and below the text.\r\n$min-line-padding: 2px !default;\r\n\r\n// The leader is the amount of whitespace in a line.\r\n// It might be useful in your calculations.\r\n$base-leader: convert-length($base-line-height - $base-font-size, $rhythm-unit, $base-font-size);\r\n\r\n// The half-leader is the amount of whitespace above and below a line.\r\n// It might be useful in your calculations.\r\n$base-half-leader: $base-leader / 2;\r\n\r\n// @private Whether the rhythm output is in absolute units (px) or not (em, rem)\r\n$relative-font-sizing: if($rhythm-unit == px, false, true);\r\n\r\n// Should we support IE6 by setting base font size?\r\n$compass-rhythm-support-ie6: false;\r\n\r\n// Validate units\r\n@if unit($base-font-size)   != 'px' { @warn \"$base-font-size must resolve to a pixel unit.\"; }\r\n@if unit($base-line-height) != 'px' { @warn \"$base-line-height must resolve to a pixel unit.\"; }\r\n@if $rhythm-unit != 'px' and $rhythm-unit != 'em' and $rhythm-unit != 'rem' {\r\n  @warn \"$rhythm-unit must be `px`, `em` or `rem`.\";\r\n}\r\n\r\n\r\n// Calculate rhythm units.\r\n@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {\r\n  $rhythm: convert-length($lines * $base-line-height - $offset, $rhythm-unit, $font-size);\r\n  @if unit($rhythm) == px {\r\n    $rhythm: floor($rhythm);\r\n  }\r\n  @return $rhythm;\r\n}\r\n\r\n// Calculate the minimum multiple of rhythm units needed to contain the font-size.\r\n@function lines-for-font-size($font-size) {\r\n  $lines: if($round-to-nearest-half-line,\r\n             ceil(2 * $font-size / $base-line-height) / 2,\r\n             ceil($font-size / $base-line-height));\r\n  // If lines are cramped include some extra lead.\r\n  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {\r\n    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);\r\n  }\r\n  @return $lines;\r\n}\r\n\r\n\r\n// @private Outputs rhythm values. For rem units, outputs pixel fallbacks\r\n// by default.\r\n@mixin output-rhythm($property, $values) {\r\n  @if $rhythm-unit == rem and $rem-with-px-fallback {\r\n    @include rem($property, $values);\r\n  }\r\n  @else {\r\n    $output: ();\r\n    @each $value in $values {\r\n      @if unit($value) == px {\r\n        // Ensure all pixel values are rounded to the nearest pixel.\r\n        $output: join($output, round($value));\r\n      }\r\n      @else {\r\n        $output: join($output, $value);\r\n      }\r\n    }\r\n    #{$property}: $output;\r\n  }\r\n}\r\n\r\n// Establishes a font baseline for the given font-size.\r\n@mixin establish-baseline($font-size: $base-font-size) {\r\n  $relative-size: 100% * ($font-size / $browser-default-font-size);\r\n\r\n  @if $compass-rhythm-support-ie6 and (not $relative-font-sizing) {\r\n    // IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts\r\n    // whose root is set in ems. So we set the root font size in percentages of\r\n    // the default font size, even if we are using absolute sizes elsewhere.\r\n    * html { font-size: $relative-size; }\r\n  }\r\n  html {\r\n    font-size: if($relative-font-sizing, $relative-size, $font-size);\r\n\r\n    // Webkit has a bug that prevents line-height being set in rem on <html>;\r\n    // To work around this and simplify output, we can set initial line-height\r\n    // in ems for all relative rhythm units, even when $rhythm-unit is `rem`.\r\n    @if $relative-font-sizing {\r\n      line-height: convert-length($base-line-height, em);\r\n    }\r\n    @else {\r\n      line-height: round($base-line-height);\r\n    }\r\n  }\r\n}\r\n\r\n// Resets the baseline to 1 rhythm unit\r\n// Does not work on elements whose font-size is different from $base-font-size.\r\n//\r\n// @deprecated This mixin will be removed in the next release.\r\n// Please use `adjust-leading-to(1)` instead.\r\n@mixin reset-baseline($font-size: $base-font-size) {\r\n  @include adjust-leading-to(1, $font-size);\r\n}\r\n\r\n// Show a background image that can be used to debug your alignments.\r\n// As this is a development feature, this mixin never outputs pixel fallbacks\r\n// for rem output.\r\n// Include the $img argument if you would rather use your own image than the\r\n// Compass default gradient image.\r\n@mixin debug-vertical-alignment($img: false) {\r\n  @if $img {\r\n    background: image-url($img);\r\n  }\r\n  @else {\r\n    @include baseline-grid-background(if($round-to-nearest-half-line, rhythm(1/2), rhythm(1)));\r\n  }\r\n}\r\n\r\n// Adjust a block to have a different font size and line height to maintain the\r\n// rhythm. $lines specifies how many multiples of the baseline rhythm each line\r\n// of this font should use up. It does not have to be an integer, but it\r\n// defaults to the smallest integer that is large enough to fit the font.\r\n// Use $from-size to adjust from a font-size other than the base font-size.\r\n@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $base-font-size) {\r\n  $to-size: convert-length($to-size, px, $from-size);\r\n  @if $lines == auto {\r\n    $lines: lines-for-font-size($to-size);\r\n  }\r\n  @include output-rhythm(font-size, convert-length($to-size, $rhythm-unit, $from-size));\r\n  @include adjust-leading-to($lines, $to-size);\r\n}\r\n\r\n// Adjust a block to have different line height to maintain the rhythm.\r\n// $lines specifies how many multiples of the baseline rhythm each line of this\r\n// font should use up. It does not have to be an integer, but it defaults to the\r\n// smallest integer that is large enough to fit the font.\r\n@mixin adjust-leading-to($lines, $font-size: $base-font-size) {\r\n  @include output-rhythm(line-height, rhythm($lines, $font-size));\r\n}\r\n\r\n// Apply leading whitespace. The $property can be margin or padding.\r\n@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {\r\n  @include output-rhythm(#{$property}-top, rhythm($lines, $font-size));\r\n}\r\n\r\n// Apply leading whitespace as padding.\r\n@mixin padding-leader($lines: 1, $font-size: $base-font-size) {\r\n  @include output-rhythm(padding-top, rhythm($lines, $font-size));\r\n}\r\n\r\n// Apply leading whitespace as margin.\r\n@mixin margin-leader($lines: 1, $font-size: $base-font-size) {\r\n  @include output-rhythm(margin-top, rhythm($lines, $font-size));\r\n}\r\n\r\n// Apply trailing whitespace. The $property can be margin or padding.\r\n@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {\r\n  @include output-rhythm(#{$property}-bottom, rhythm($lines, $font-size));\r\n}\r\n\r\n// Apply trailing whitespace as padding.\r\n@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {\r\n  @include output-rhythm(padding-bottom, rhythm($lines, $font-size));\r\n}\r\n\r\n// Apply trailing whitespace as margin.\r\n@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {\r\n  @include output-rhythm(margin-bottom, rhythm($lines, $font-size));\r\n}\r\n\r\n// Shorthand mixin to apply whitespace for top and bottom margins and padding.\r\n@mixin rhythm(\r\n  $leader: 1,\r\n  $padding-leader: 0,\r\n  $padding-trailer: $padding-leader,\r\n  $trailer: $leader,\r\n  $font-size: $base-font-size\r\n) {\r\n  @include leader($leader, $font-size);\r\n  @include padding-leader($padding-leader, $font-size);\r\n  @include padding-trailer($padding-trailer, $font-size);\r\n  @include trailer($trailer, $font-size);\r\n}\r\n\r\n// Shorthand mixin to apply whitespace for top and bottom margins.\r\n@mixin rhythm-margins(\r\n  $leader: 1,\r\n  $trailer: $leader,\r\n  $font-size: $base-font-size\r\n) {\r\n  @include leader($leader, $font-size);\r\n  @include trailer($trailer, $font-size);\r\n}\r\n\r\n// Shorthand mixin to apply whitespace for top and bottom padding.\r\n@mixin rhythm-padding(\r\n  $padding-leader: 1,\r\n  $padding-trailer: $padding-leader,\r\n  $font-size: $base-font-size\r\n) {\r\n  @include padding-leader($padding-leader, $font-size);\r\n  @include padding-trailer($padding-trailer, $font-size);\r\n}\r\n\r\n// Apply a border and whitespace to any side without destroying the vertical\r\n// rhythm. The whitespace must be greater than the width of the border.\r\n@mixin apply-side-rhythm-border(\r\n  $side,\r\n  $width: $default-rhythm-border-width,\r\n  $lines: 1,\r\n  $font-size: $base-font-size,\r\n  $border-style: $default-rhythm-border-style\r\n) {\r\n  // If applying borders to all sides, use shorthand properties\r\n  $border-prop: if($side == all, border, border-#{$side});\r\n  @include output-rhythm(#{$border-prop}-width, convert-length($width, $rhythm-unit, $font-size));\r\n  #{$border-prop}-style: nth($border-style, 1);\r\n  @if type-of($border-style) == list and length($border-style) > 1 {\r\n    #{$border-prop}-color: nth($border-style, 2);\r\n  }\r\n  $padding-prop: if($side == all, padding, padding-#{$side});\r\n  @include output-rhythm(#{$padding-prop}, rhythm($lines, $font-size, $offset: $width));\r\n}\r\n\r\n// Apply a leading border.\r\n// $border-style and $width are deprecated and will be removed in a future version of Compass.\r\n@mixin leading-border(\r\n  $width: $default-rhythm-border-width,\r\n  $lines: 1,\r\n  $font-size: $base-font-size,\r\n  $border-style: $default-rhythm-border-style\r\n) {\r\n  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);\r\n}\r\n\r\n// Apply a trailing border.\r\n@mixin trailing-border(\r\n  $width: $default-rhythm-border-width,\r\n  $lines: 1,\r\n  $font-size: $base-font-size,\r\n  $border-style: $default-rhythm-border-style\r\n) {\r\n  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);\r\n}\r\n\r\n// Apply both leading and trailing borders.\r\n@mixin horizontal-borders(\r\n  $width: $default-rhythm-border-width,\r\n  $lines: 1,\r\n  $font-size: $base-font-size,\r\n  $border-style: $default-rhythm-border-style\r\n) {\r\n  @include leading-border($width, $lines, $font-size, $border-style);\r\n  @include trailing-border($width, $lines, $font-size, $border-style);\r\n}\r\n\r\n// Alias for `horizontal-borders` mixin.\r\n@mixin h-borders(\r\n  $width: $default-rhythm-border-width,\r\n  $lines: 1,\r\n  $font-size: $base-font-size,\r\n  $border-style: $default-rhythm-border-style\r\n) {\r\n  @include horizontal-borders($width, $lines, $font-size, $border-style);\r\n}\r\n\r\n// Apply borders and whitespace equally to all sides.\r\n@mixin rhythm-borders(\r\n  $width: $default-rhythm-border-width,\r\n  $lines: 1,\r\n  $font-size: $base-font-size,\r\n  $border-style: $default-rhythm-border-style\r\n) {\r\n  @include apply-side-rhythm-border(all, $width, $lines, $font-size, $border-style);\r\n}\r\n","// @private Default font-size for all browsers\r\n$browser-default-font-size: 16px;\r\n\r\n// Base font size in pixels, if not already defined.\r\n// Should be the same as the font-size of the html element.\r\n$base-font-size: 16px !default;\r\n\r\n// Whether to output fallback values in px when outputting rems.\r\n$rem-with-px-fallback: true !default;\r\n\r\n\r\n// Convert any CSS <length> or <percentage> value to any another.\r\n//\r\n// @param $length\r\n//   A css <length> or <percentage> value\r\n//\r\n// @param $to-unit\r\n//   String matching a css unit keyword, e.g. 'em', '%', etc.\r\n//\r\n// @param $from-context\r\n//   When converting from relative units, the absolute length (in px) to\r\n//   which $length refers (e.g. for $lengths in em units, would normally be the\r\n//   font-size of the current element).\r\n//\r\n// @param $to-context\r\n//   For converting to relative units, the absolute length in px to which the\r\n//   output value will refer. Defaults to the same as $from-context, since it is\r\n//   rarely needed.\r\n@function convert-length(\r\n\t$length,\r\n\t$to-unit,\r\n\t$from-context: $base-font-size,\r\n\t$to-context: $from-context\r\n) {\r\n\r\n\t$from-unit: unit($length);\r\n\r\n\t// Optimize for cases where `from` and `to` units are accidentally the same.\r\n\t@if $from-unit == $to-unit { @return $length; }\r\n\r\n\t// Context values must be in px so we can determine a conversion ratio for\r\n\t// relative units.\r\n\t@if unit($from-context) != 'px' { @warn \"Paremeter $from-context must resolve to a value in pixel units.\"; }\r\n\t@if unit($to-context) != 'px' { @warn \"Parameter $to-context must resolve to a value in pixel units.\"; }\r\n\r\n\t// Convert input length to pixels\r\n\t$px-length: $length;\r\n\r\n\t@if $from-unit != 'px' {\r\n\t\t// Convert relative units using the from-context parameter.\r\n\t\t@if      $from-unit == 'em'  { $px-length: $length * $from-context / 1em }\r\n\t\t@else if $from-unit == 'rem' { $px-length: $length * $base-font-size / 1rem }\r\n\t\t@else if $from-unit == '%'   { $px-length: $length * $from-context / 100% }\r\n\t\t@else if $from-unit == 'ex'  { $px-length: $length * $from-context / 2ex }\r\n\t\t// Convert absolute units using Sass' conversion table.\r\n\t\t@else if $from-unit == 'in'  or\r\n\t\t\t\t\t\t $from-unit == 'mm'  or\r\n\t\t\t\t\t\t $from-unit == 'cm'  or\r\n\t\t\t\t\t\t $from-unit == 'pt'  or\r\n\t\t\t\t\t\t $from-unit == 'pc'  { $px-length: 0px + $length }\r\n\t\t// Certain units can't be converted.\r\n\t\t@else if $from-unit == 'ch'  or\r\n\t\t\t\t\t\t $from-unit == 'vw'  or\r\n\t\t\t\t\t\t $from-unit == 'vh'  or\r\n\t\t\t\t\t\t $from-unit == 'vmin' {\r\n\t\t\t@warn \"#{$from-unit} units can't be reliably converted; Returning original value.\";\r\n\t\t\t@return $length;\r\n\t\t}\r\n\t\t@else {\r\n\t\t\t@warn \"#{$from-unit} is an unknown length unit. Returning original value.\";\r\n\t\t\t@return $length;\r\n\t\t}\r\n\t}\r\n\r\n\t// Convert length in pixels to the output unit\r\n\t$output-length: $px-length;\r\n\t@if $to-unit != 'px' {\r\n\t\t// Relative units\r\n\t\t@if      $to-unit == 'em'  { $output-length: $px-length * 1em / $to-context }\r\n\t\t@else if $to-unit == 'rem' { $output-length: $px-length * 1rem / $base-font-size }\r\n\t\t@else if $to-unit == '%'   { $output-length: $px-length * 100% / $to-context }\r\n\t\t@else if $to-unit == 'ex'  { $output-length: $px-length * 2ex / $to-context }\r\n\t\t// Absolute units\r\n\t\t@else if $to-unit == 'in'  { $output-length: 0in + $px-length }\r\n\t\t@else if $to-unit == 'mm'  { $output-length: 0mm + $px-length }\r\n\t\t@else if $to-unit == 'cm'  { $output-length: 0cm + $px-length }\r\n\t\t@else if $to-unit == 'pt'  { $output-length: 0pt + $px-length }\r\n\t\t@else if $to-unit == 'pc'  { $output-length: 0pc + $px-length }\r\n\t\t// Non-convertible units\r\n\t\t@else if $to-unit == 'ch'  or\r\n\t\t\t\t\t\t $to-unit == 'vw'  or\r\n\t\t\t\t\t\t $to-unit == 'vh'  or\r\n\t\t\t\t\t\t $to-unit == 'vmin' {\r\n\t\t\t@warn \"#{$to-unit} units can't be reliably converted; Returning original value.\";\r\n\t\t\t@return $length;\r\n\t\t}\r\n\t\t@else {\r\n\t\t\t@warn \"#{$to-unit} is an unknown length unit. Returning original value.\";\r\n\t\t\t@return $length;\r\n\t\t}\r\n\t}\r\n\r\n\t@return $output-length;\r\n}\r\n\r\n\r\n// @private Get the px/rem versions of a value.\r\n@function rem-fallback-values($value) {\r\n  $_return: (\r\n    px: $value,\r\n    rem: $value,\r\n  );\r\n\r\n  @if type-of($value) == number and not unitless($value) {\r\n    @if unit($value) == rem {\r\n      $_return: map-merge($_return, (\r\n        px: round(convert-length($value, px)),\r\n      ));\r\n    } @else if unit($value) == px {\r\n      $_return: map-merge($_return, (\r\n        px: round($value),\r\n        rem: convert-length($value, rem),\r\n      ));\r\n    }\r\n  }\r\n\r\n  @return $_return;\r\n}\r\n\r\n// @private Get the px/rem versions of a list (or nested lists).\r\n@function list-convert-rems($value) {\r\n  $_empty: (\r\n    px: (),\r\n    rem: (),\r\n  );\r\n  $_return: $_empty;\r\n  $_sep: null;\r\n\r\n  @if type-of($value) == list {\r\n    $_sep: list-separator($value);\r\n    @each $sub in $value {\r\n      $_this: list-convert-rems($sub);\r\n      $_return: (\r\n        px: append(map-get($_return, px), map-get($_this, px), $_sep),\r\n        rem: append(map-get($_return, rem), map-get($_this, rem), $_sep),\r\n      );\r\n    }\r\n  } @else {\r\n    $_this: rem-fallback-values($value);\r\n    $_return: map-merge($_return, $_this);\r\n  }\r\n\r\n  @return $_return;\r\n}\r\n\r\n\r\n// Output a given style rule containing rem values along with an (optional)\r\n// fallback rule for older browsers (with rem values converted to px).\r\n//\r\n// @param $property\r\n//   The css property name.\r\n//\r\n// @param $values\r\n//   The value or list of values for the property.\r\n//\r\n// @param $use-px-fallback\r\n//   [ true | false ]\r\n//\r\n@mixin rem($property, $values, $use-px-fallback: $rem-with-px-fallback) {\r\n\r\n  // get converted values.\r\n  $values: list-convert-rems($values);\r\n  $px-values: map-get($values, px);\r\n  $values: map-get($values, rem);\r\n\r\n  // Use pixel fallback for browsers that don't understand rem units.\r\n  @if $use-px-fallback and $px-values != $values {\r\n    #{$property}: $px-values;\r\n  }\r\n\r\n  // Use rem values for everyone else (overrides pixel values).\r\n  #{$property}: $values;\r\n}\r\n","//\n// --------------------------------\n// 초기 변수\n\n\n//\n// --------------------------------\n// headings 함수\n@function headings($start: all, $end: null) {\n\n\t@if $start == all {\n\t\t@return 'h1, h2, h3, h4, h5, h6'; }\n\n\t@else {\n\n\t\t@if type-of($start) != number {\n\t\t\t@error \"첫번째 인자 값으로 all 또는 숫자만 적용가능합니다.\"; }\n\n\t\t$heading-list: '';\n\n\t\t@if $end == null {\n\t\t\t@for $i from 1 through $start {\n\t\t\t\t$heading-list: $heading-list + \"h#{$i}, \"; } }\n\t\t@else {\n\t\t\t@for $i from $start through $end {\n\t\t\t\t$heading-list: $heading-list + \"h#{$i}, \"; } }\n\n\t\t@return $heading-list; } }\n\n\n//\n// --------------------------------\n// setHeadings 믹스인\n@mixin headings($start: all, $end: null, $color: null) {\n\t#{headings($start, $end)} {\n\t\t@content; } }\n","// * --------------------------------\r\n// * 버티컬 리듬 (수직방향 운율 설정)\r\n// * --------------------------------\r\nhtml {\r\n\t// http://compass-style.org/reference/compass/typography/vertical_rhythm/#mixin-establish-baseline\r\n\t@include establish-baseline();\r\n}\r\n\r\n@include headings() {\r\n\t@include leader(1);// margin-top\r\n\t// @include trailer(1);//default $lines: 1 밑에 한줄 추가. margin-bottom\r\n}\r\n\r\n@include headings(5, 6) {\r\n\tfont-weight: bold;\r\n\tfont-weight: 700;\r\n}\r\n\r\nh1 {\r\n\t@include adjust-font-size-to(48px);// 3칸 잡음.\r\n\t// @include trailer();//default $lines: 1 밑에 한줄 추가. margin-bottom\r\n\t// @include leader();// margin-top\r\n}\r\n\r\nh2 {\r\n\t@include adjust-font-size-to(32px);\r\n}\r\n\r\nh3 {\r\n\t@include adjust-font-size-to(26px);\r\n}\r\n\r\nh4 {\r\n\t@include adjust-font-size-to(22px);\r\n}\r\n\r\nh5 {\r\n\t@include adjust-font-size-to(18px);\r\n}\r\n\r\nh6 {\r\n\t@include adjust-font-size-to($base-font-size);\r\n}\r\n\r\np {\r\n\t@include adjust-font-size-to($base-font-size);\r\n\t@include trailer(1);\r\n}","// Susy Box Sizing\r\n// =================\r\n\r\n// Global Box Sizing\r\n// -----------------\r\n// Set a box model globally on all elements.\r\n// - [$box]: border-box | content-box\r\n// - [$inherit]: true | false\r\n@mixin global-box-sizing(\r\n  $box: susy-get(global-box-sizing),\r\n  $inherit: false\r\n) {\r\n  $inspect: $box;\r\n\r\n  @if $inherit {\r\n    @at-root {\r\n       html { @include output((box-sizing: $box)); }\r\n       *, *:before, *:after { box-sizing: inherit; }\r\n     }\r\n  } @else {\r\n    *, *:before, *:after { @include output((box-sizing: $box)); }\r\n  }\r\n\r\n  @include susy-inspect(global-box-sizing, $inspect);\r\n  @include update-box-model($box);\r\n}\r\n\r\n// Border Box Sizing\r\n// -----------------\r\n// A legacy shortcut...\r\n// - [$inherit]: true | false\r\n@mixin border-box-sizing(\r\n  $inherit: false\r\n) {\r\n  @include global-box-sizing(border-box, $inherit);\r\n}\r\n\r\n// Update Box Model\r\n// ----------------\r\n// PRIVATE: Updates global box model setting\r\n@mixin update-box-model(\r\n  $box\r\n) {\r\n  @if $box != susy-get(global-box-sizing) {\r\n  @include susy-set(global-box-sizing, $box);\r\n  }\r\n}\r\n","// rem Support\r\n// ===========\r\n\r\n// rem\r\n// ---\r\n// Check for an existing support mixin, or output directly.\r\n// - $prop  : <css property>\r\n// - $val   : <css value>\r\n@mixin susy-rem(\r\n  $prop,\r\n  $val\r\n) {\r\n  $_reqs: (\r\n    variable: rhythm-unit rem-with-px-fallback,\r\n    mixin: rem,\r\n  );\r\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\r\n    @include rem($prop, $val);\r\n  } @else {\r\n    #{$prop}: $val;\r\n  }\r\n}\r\n","$susy: (\r\n\tcolumns: 2,                    // 4\r\n\tgutters: 1/8,                 // 1/4\r\n\r\n\t// global-box-sizing: border-box,\r\n\r\n\tdebug: (\r\n\t\t// image: show,               // hide\r\n\t\tcolor: rgba(#FD5D79, 0.45)\r\n\t\t// output: overlay,        // background\r\n\t\t// toggle: top right       // top right\r\n\t)\r\n);\r\n\r\n// * -------------------------------------\r\n// * susy 문서 내 모든 요소에 border-box 까지 공간 확장. default content-box\r\n@include global-box-sizing(border-box);\r\n\r\n#page{\r\n\t@include container(/* show */);\r\n\t\r\n\t> *{\r\n\t\tpadding: 0 $base-line-height;\r\n\t}\r\n}\r\n\r\n#page-header{\r\n\t@include span(full);\r\n\theight: $base-line-height * 7;\r\n\t@include bg-color(#F777CF, 0.5);\r\n}\r\n\r\n#gnb{\r\n\t@include span(full);\r\n\t@include bg-color(#24D624, 0.5);\r\n}\r\n\r\n#page-main{\r\n\t@include span(full);\r\n\t@include bg-color(#33EBF1, 0.5);\r\n\t\r\n\tpadding: 0;\r\n\r\n\t@include headings() {\r\n\t\tpadding: 0 $base-line-height;\r\n\t}\r\n\r\n\tp {\r\n\t\tpadding: 0 $base-line-height;\r\n\t}\r\n\t\r\n\t.article{\r\n\t\timg{\r\n\t\t\t//yamoo9 이미지 반응형에 맞게 설정.\r\n\t\t\t@include rwd-image(800px);\r\n\t\t\t@include leader(1);\r\n\t\t\t@include trailer(1);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n#page-footer{\r\n\t@include span(full);\r\n\t@include bg-color(#6060EF, 0.5);\r\n}\r\n\r\n.rwd-video-wrapper,\r\n.rwd-video-container iframe,\r\n.rwd-video-container {\r\n\tpadding: 0;\r\n}\r\n\r\n.rwd-video-container {\r\n\tborder: 0;\r\n\t@include leader(1);\r\n\t@include trailer(1);\r\n\t@include rwd-video(true, '.rwd-video-wrapper', 800px);\r\n}","// Container Syntax\r\n// ================\r\n\r\n// Container [mixin]\r\n// -----------------\r\n// Set a container element\r\n// - [$layout]  : <settings>\r\n@mixin container(\r\n  $layout: $susy\r\n) {\r\n  $inspect    : $layout;\r\n  $layout     : parse-grid($layout);\r\n\r\n  $_width     : get-container-width($layout);\r\n  $_justify   : parse-container-position(susy-get(container-position, $layout));\r\n  $_property  : if(susy-get(math, $layout) == static, width, max-width);\r\n\r\n  $_box       : susy-get(box-sizing, $layout);\r\n\r\n  @if $_box {\r\n    @include output((box-sizing: $_box));\r\n  }\r\n\r\n  @include susy-inspect(container, $inspect);\r\n  @include float-container($_width, $_justify, $_property);\r\n  @include show-grid($layout);\r\n}\r\n\r\n// Container [function]\r\n// --------------------\r\n// Return container width\r\n// - [$layout]  : <settings>\r\n@function container(\r\n  $layout: $susy\r\n) {\r\n  $layout: parse-grid($layout);\r\n  @return get-container-width($layout);\r\n}\r\n\r\n// Get Container Width\r\n// -------------------\r\n// Calculate the container width\r\n// - [$layout]: <settings>\r\n@function get-container-width(\r\n  $layout: $susy\r\n) {\r\n  $layout         : parse-grid($layout);\r\n  $_width         : susy-get(container, $layout);\r\n  $_column-width  : susy-get(column-width, $layout);\r\n  $_math          : susy-get(math, $layout);\r\n\r\n  @if not($_width) or $_width == auto {\r\n    @if valid-column-math($_math, $_column-width) {\r\n      $_columns   : susy-get(columns, $layout);\r\n      $_gutters   : susy-get(gutters, $layout);\r\n      $_spread    : if(is-split($layout), wide, narrow);\r\n      $_width     : susy-sum($_columns, $_gutters, $_spread) * $_column-width;\r\n    } @else {\r\n      $_width: 100%;\r\n    }\r\n  }\r\n\r\n  @return $_width;\r\n}\r\n\r\n// Parse Container Position\r\n// ------------------------\r\n// Parse the $container-position into margin values.\r\n// - [$justify]   : left | center | right | <length> [<length>]\r\n@function parse-container-position(\r\n  $justify: map-get($susy-defaults, container-position)\r\n) {\r\n  $_return: if($justify == left, 0, auto) if($justify == right, 0, auto);\r\n\r\n  @if not(index(left right center, $justify)) {\r\n    $_return: nth($justify, 1);\r\n    $_return: $_return if(length($justify) > 1, nth($justify, 2), $_return);\r\n  }\r\n\r\n  @return $_return;\r\n}\r\n","// Susy Fallback Clearfix\r\n// ======================\r\n\r\n\r\n// Clearfix\r\n// --------\r\n// Check for an existing support mixin, or provide a simple fallback.\r\n@mixin susy-clearfix {\r\n  @if susy-support(clearfix, (mixin: clearfix)) {\r\n    @include clearfix;\r\n  } @else {\r\n    &:after {\r\n      content: \" \";\r\n      display: block;\r\n      clear: both;\r\n    }\r\n  }\r\n}\r\n","// * 고정 형태의 레이아웃\r\n// * 중첩된 레이아웃\r\n// * 반응형 레이아웃\r\n// * 유동 그리드 레이아웃\r\n// * 적응형 그리드 레이아웃\r\n// * -------------------------------------------------------------\r\n// * 비정형 그리드 레이아웃 (디자이너가 그리드 시스템을 모르거나.., 안쓴다고 할 때)\r\n// * -------------------------------------------------------------\r\n$base-font-size: 14px;\r\n$base-line-height: $base-font-size * 1.5;\r\n// http://compass-style.org/reference/compass/typography/vertical_rhythm/\r\n// 버티컬 리듬을 사용하기 위해서는 모든 공간을 초기화 하는 작업을 해야 한다.\r\n// @import \"compass/vertical_rhythm\"; \r\n// 콤파스에 버티컬 리듬이 있는데 먼저 $base-font-size 설정\r\n// $base-line-height 잡고 +establish-baseline() 믹스인을 사용.\r\n// 문서의 수직방향에 대한 운율을 설정 하는게 버티컬 리듬.\r\n\r\n$rhythm-unit: 'px';\r\n\r\n// $susy: (\r\n// \tcolumns: 3, //default 4\r\n// \tgutters: 1/12, //default 1/4\r\n// \t// \tgutter-position: split, // 거터 방향: 양쪽(split), 패딩 설정(inside)\r\n\r\n// \t// 고정 폭 디자인의 핵심!!!\r\n// \t// column-width: 80px,\r\n// \t// math: static,\r\n\r\n// \tdebug:(\r\n// \t\timage: show-baseline, //default hide, show-columns , show-baseline 은  Compass의 vertical rhythms이라는게 있는데 이걸 사용하게 되면 base-line-height 에 맞추는건데..\r\n// \t\t// css를 가지고 수직에 대한 리듬을 지키는것을 말한다.\r\n// \t\t// https://drewish.com/tools/vertical-rhythm/\r\n// \t\tcolor: rgba(yellow, 0.3),\r\n// \t\toutput: overlay,//default background\r\n// \t\ttoggle:top right //overlay 가 될때 토글버튼의 위치. default top right\r\n// \t)\r\n// );","// Span Syntax\r\n// ===========\r\n\r\n// Span [mixin]\r\n// ------------\r\n// Set a spanning element using shorthand syntax.\r\n// - $span  : <span>\r\n@mixin span(\r\n  $span\r\n) {\r\n  $inspect: $span;\r\n  $span: parse-span($span);\r\n  $output: span-math($span);\r\n  $nesting: susy-get(span, $span);\r\n  $clear: susy-get(clear, $span);\r\n\r\n  $box: susy-get(box-sizing, $span);\r\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\r\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\r\n\r\n  @if $clear == break {\r\n    @include break;\r\n  } @else if $clear == nobreak {\r\n    @include nobreak;\r\n  }\r\n\r\n  @include susy-inspect(span, $inspect);\r\n  @include output((box-sizing: $box));\r\n  @include float-span-output($output...);\r\n\r\n  @if valid-columns($nesting, silent) {\r\n    @include nested($span) { @content; }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// Span [function]\r\n// ---------------\r\n// Return the width of a span.\r\n// - $span  : <span>\r\n@function span(\r\n  $span\r\n) {\r\n  @return get-span-width($span);\r\n}\r\n\r\n// Span Math\r\n// ---------\r\n// Get all the span results.\r\n// - $span: <map>\r\n@function span-math(\r\n  $span\r\n) {\r\n  $nest             : if(susy-get(role, $span) == nest, true, false);\r\n  $split-nest       : if(is-split($span) and $nest, true, false);\r\n  $edge             : get-edge($span);\r\n  $location         : get-location($span);\r\n\r\n  $float            : from;\r\n  $padding-before   : null;\r\n  $padding-after    : null;\r\n  $margin-before    : null;\r\n  $margin-after     : null;\r\n\r\n  // calculate widths\r\n  $spread: index(map-values($span), spread);\r\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\r\n  $width: get-span-width($span);\r\n  $gutters: get-gutters($span);\r\n\r\n  // apply gutters\r\n  @if is-inside($span) {\r\n    @if not(susy-get(role, $span)) {\r\n      $padding-before: map-get($gutters, before);\r\n      $padding-after: map-get($gutters, after);\r\n    }\r\n  } @else {\r\n    @if not($split-nest) {\r\n      $margin-before: map-get($gutters, before);\r\n      $margin-after: map-get($gutters, after);\r\n    }\r\n  }\r\n\r\n  // special margin handling\r\n  @if susy-get(output, $span) == isolate and $location {\r\n    $margin-before: get-isolation($span);\r\n    $margin-after: -100%;\r\n  } @else if $edge {\r\n    $is-split: is-split($span);\r\n    $pos: susy-get(gutter-position, $span);\r\n\r\n    @if $edge == last {\r\n      $float: susy-get(last-flow, $span);\r\n    }\r\n\r\n    @if not($is-split) {\r\n      @if $edge == full or ($edge == first and $pos == before) {\r\n        $margin-before: 0;\r\n      }\r\n      @if $edge == full or ($edge == last and $pos == after) {\r\n        $margin-after: 0;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  @return (\r\n    width           : $width,\r\n    float           : $float,\r\n    margin-before   : $margin-before,\r\n    margin-after    : $margin-after,\r\n    padding-before  : $padding-before,\r\n    padding-after   : $padding-after,\r\n    flow            : susy-get(flow, $span),\r\n  );\r\n}\r\n\r\n// Get Span Width\r\n// --------------\r\n// Return span width.\r\n// - $span: <map>\r\n@function get-span-width(\r\n  $span\r\n) {\r\n  $span     : parse-span($span);\r\n\r\n  $n        : susy-get(span, $span);\r\n  $location : get-location($span);\r\n  $columns  : susy-get(columns, $span);\r\n  $gutters  : susy-get(gutters, $span);\r\n  $spread   : susy-get(spread, $span);\r\n\r\n  $context  : null;\r\n  $span-sum : null;\r\n  $width    : null;\r\n\r\n  @if $n == 'full' {\r\n    $pos: susy-get(gutter-position, $span);\r\n    $role: susy-get(role, $span);\r\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\r\n  }\r\n\r\n  @if type-of($n) != number {\r\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\r\n  } @else if unitless($n) {\r\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\r\n    $spread: if(is-inside($span), $spread or wide, $spread);\r\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\r\n\r\n    $_math: susy-get(math, $span);\r\n    $_column-width: susy-get(column-width, $span);\r\n    @if $_math == static {\r\n      $width: $span-sum * valid-column-math($_math, $_column-width);\r\n    } @else {\r\n      $width: percentage($span-sum / $context);\r\n    }\r\n  } @else {\r\n    $width: $n;\r\n  }\r\n\r\n  @return $width;\r\n}\r\n","// Direction Helpers\r\n// =================\r\n\r\n// Susy Flow Defaults\r\n// ------------------\r\n// - PRIVATE\r\n@include susy-defaults((\r\n  flow: ltr,\r\n));\r\n\r\n// Get Direction\r\n// -------------\r\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\r\n// - [$flow]  : ltr | rtl\r\n// - [$key]   : from | to\r\n@function get-direction(\r\n  $flow: map-get($susy-defaults, flow),\r\n  $key: from\r\n) {\r\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\r\n  @return map-get($return, $key);\r\n}\r\n\r\n// To\r\n// --\r\n// Return the 'to' direction of a flow\r\n// - [$flow]  : ltr | rtl\r\n@function to(\r\n  $flow: map-get($susy-defaults, flow)\r\n) {\r\n  @return get-direction($flow, to);\r\n}\r\n\r\n// From\r\n// ----\r\n// Return the 'from' direction of a flow\r\n// - [$flow]  : ltr | rtl\r\n@function from(\r\n  $flow: map-get($susy-defaults, flow)\r\n) {\r\n  @return get-direction($flow, from);\r\n}\r\n","//\n// --------------------------------\n// 초기 변수\n$base-alpha: 1 !default;\n$using-hsla: false !default;\n\n\n\n\n//\n// --------------------------------\n// _rgba() 함수\n@function _rgba($hex, $alpha) {\n\t$red   : red($hex);\n\t$green : green($hex);\n\t$blue  : blue($hex);\n\n\t@if $alpha == 1 {\n\t\t@return unquote('rgb(#{$red},#{$green},#{$blue})'); }\n\t@else {\n\t\t@return unquote('rgba(#{$red},#{$green},#{$blue},#{$alpha})'); } }\n\n\n\n//\n// --------------------------------\n// _hsla() 함수\n@function _hsla($hex, $alpha) {\n\t$hue        : floor( de-unit( hue($hex) ) );\n\t$saturation : floor( saturation($hex) );\n\t$lightness  : floor( lightness($hex) );\n\n\t@if $alpha == 1 {\n\t\t@return unquote('hsl(#{$hue},#{$saturation},#{$lightness})'); }\n\t@else {\n\t\t@return unquote('hsla(#{$hue},#{$saturation},#{$lightness},#{$alpha})'); } }\n\n\n\n//\n// --------------------------------\n// color() 함수\n@function color($hex, $alpha) {\n\t@if $using-hsla == false {\n\t\t@return _rgba( $hex, if($alpha != null, $alpha, $base-alpha) ); }\n\t@else {\n\t\t@return _hsla( $hex, if($alpha != null, $alpha, $base-alpha) ); } }\n\n\n//\n// --------------------------------\n// color() 믹스인\n@mixin color($hex, $alpha: null) {\n\t@if $polyfill == true {\n\t\tcolor: $hex; }\n\tcolor: color($hex, $alpha); }\n\n//\n// --------------------------------\n// color() 믹스인\n@mixin bg-color($hex, $alpha: null) {\n\t@if $polyfill == true {\n\t\tbackground-color: $hex; }\n\n\t@if $alpha != null {\n\t\tbackground-color: color($hex, $alpha); } }\n"],"sourceRoot":"/source/"}